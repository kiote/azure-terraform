---
- name: Create Kubernetes directory
  file:
    path: /home/{{ ansible_user }}/k3s/{{ app_name }}
    state: directory

- name: Install cert manager
  shell: |
    kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.1/cert-manager.yaml
  become: yes
  become_user: "{{ ansible_user }}"

- name: Create cert issuer for letsencrypt
  copy:
    dest: /home/{{ ansible_user }}/k3s/{{ app_name }}/cert-issuer.yml
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    content: |
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-issuer
      spec:
        acme:
          server: https://acme-v02.api.letsencrypt.org/directory
          email: {{ letsencrypt_email }}
          privateKeySecretRef:
            name: letsencrypt-issuer-key
          solvers:
          - http01:
              ingress:
                class: traefik

- name: Create Kubernetes namespace file
  copy:
    dest: /home/{{ ansible_user }}/k3s/{{ app_name }}/namespace.yml
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    content: |
      apiVersion: v1
      kind: Namespace
      metadata:
        name: {{ app_namespace }}

- name: Create Kubernetes deployment file
  copy:
    dest: /home/{{ ansible_user }}/k3s/{{ app_name }}/deployment.yml
    content: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{ app_name }}
        namespace: {{ app_namespace }}
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: {{ app_name }}
        template:
          metadata:
            labels:
              app: {{ app_name }}
          spec:
            containers:
            - name: {{ app_name }}
              image: {{ docker_image_name }}:latest
              imagePullPolicy: Never # Only local images
              ports:
              - containerPort: 5000
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Create Kubernetes service file
  copy:
    dest: /home/{{ ansible_user }}/k3s/{{ app_name }}/service.yml
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    content: |
      apiVersion: v1
      kind: Service
      metadata:
        name: {{ app_name }}
        namespace: {{ app_namespace }}
      spec:
        selector:
          app: {{ app_name }}
        ports:
          - protocol: TCP
            port: 80
            targetPort: 5000  # This is your application port
        type: ClusterIP 

- name: Create Kubernetes Ingress file
  copy:
    dest: /home/{{ ansible_user }}/k3s/{{ app_name }}/ingress.yml
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    content: |
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: {{ app_name }}-ingress
        namespace: {{ app_namespace }}
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-issuer"
          traefik.ingress.kubernetes.io/router.tls: "true"
      spec:
        tls:
        - hosts:
          - {{ app_subdomain }}.{{ app_domain }}
          secretName: {{ app_name }}-tls
        ingressClassName: traefik
        rules:
        - host: {{ app_subdomain }}.{{ app_domain }}
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: {{ app_name }}
                  port:
                    number: 80

- name: Remove namespace if it exists
  shell: kubectl delete -f /home/{{ ansible_user }}/k3s/{{ app_name }}/namespace.yml
  ignore_errors: yes
  become: yes
  become_user: "{{ ansible_user }}"

- name: Apply Kubernetes namespace
  shell: kubectl apply -f /home/{{ ansible_user }}/k3s/{{ app_name }}/namespace.yml
  become: yes
  become_user: "{{ ansible_user }}"

- name: Apply cert issuer
  shell: kubectl apply -f /home/{{ ansible_user }}/k3s/{{ app_name }}/cert-issuer.yml
  become: yes
  become_user: "{{ ansible_user }}"

- name: Apply Kubernetes deployment
  shell: kubectl apply -f /home/{{ ansible_user }}/k3s/{{ app_name }}/deployment.yml
  become: yes
  become_user: "{{ ansible_user }}"

- name: Apply Kubernetes service
  shell: kubectl apply -f /home/{{ ansible_user }}/k3s/{{ app_name }}/service.yml
  become: yes
  become_user: "{{ ansible_user }}"

- name: Apply Kubernetes Ingress
  shell: kubectl apply -f /home/{{ ansible_user }}/k3s/{{ app_name }}/ingress.yml
  become: yes
  become_user: "{{ ansible_user }}"
